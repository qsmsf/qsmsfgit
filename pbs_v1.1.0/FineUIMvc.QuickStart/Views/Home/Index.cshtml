@{
    ViewBag.Title = "首页";
    ViewBag.UserName = User.Identity.Name;
    var F = @Html.F();
}

@section head {

    <link type="text/css" rel="stylesheet" href="~/res/css/default.css" />

}

@section body {


    <div id="header" class="ui-widget-header f-mainheader">
        <table>
            <tr>
                <td>
                    @(F.Button().OnClientClick("window.open('~','_blank');").EnableDefaultCorner(false).EnableDefaultState(false)
                        .IconFont(IconFont.Home).IconAlign(IconAlign.Top).ToolTip("官网首页").ID("btnHomePage").CssClass("icononlyaction")
                    )
                    <a class="logo" href="@Url.Content("~/")" title="公安局简易勘验系统">
                        公安局简易勘验系统
                    </a>
                </td>
                <td style="text-align: right;">

                    @(F.Button().EnableDefaultCorner(false).EnableDefaultState(false).IconFont(IconFont.Bank)
                        .IconAlign(IconAlign.Top).Text("界面风格").ID("btnThemeSelect").CssClass("icontopaction themes").Listener("click", "onThemeSelectClick")
                    )

                    @(F.Button().EnableDefaultCorner(false).EnableDefaultState(false).IconAlign(IconAlign.Left)
                        .IconUrl(Url.Content("~/res/images/blank_150.png")).Text(ViewBag.UserName)
                        .ID("CurUserFullName").CssClass("userpicaction")
                        .Menu(F.Menu()
                            .Items(
                                F.MenuButton().IconFont(IconFont.User).Text("个人信息").Listener("click", "EditSelf"),
                                F.MenuSeparator(),
                                F.MenuButton().IconFont(IconFont.SignOut).Text("安全退出").OnClick(Url.Action("onSignOut_Click"))
                            )
                        )
                    )
                </td>
            </tr>
        </table>
    </div>

    <div id="maincontent">
        

    </div>

    @(F.RegionPanel().ID("RegionPanel1").ShowBorder(false).IsViewPort(true)
        .Regions(
            F.Region().ID("Region1").ShowBorder(false).ShowHeader(false).RegionPosition(Position.Top)
                .Layout(LayoutType.Fit).ContentEl("#header"),
            F.Region().ID("Region2").RegionSplit(true).Width(200)
                .ShowHeader(true).Title("菜单").EnableCollapse(true).Layout(LayoutType.Fit).RegionPosition(Position.Left)
                .Items(
                    F.Tree().ShowBorder(false).ShowHeader(false).ID("treeMenu")
                        .Nodes(
                            F.TreeNode().Text("功能列表").Expanded(true).Nodes(
                                    (TreeNode[])ViewBag.menuNodes
                                )
                        )
                ),
            F.Region().ID("mainRegion").ShowHeader(false).Layout(LayoutType.Fit).RegionPosition(Position.Center)
                .Items(
                    F.TabStrip().ID("mainTabStrip").EnableTabCloseMenu(true).ShowBorder(false)
                        .Tabs(
                            F.Tab().ID("Tab1").Title("首页").BodyPadding(10).Layout(LayoutType.Fit).Icon(Icon.House).ContentEl("#maincontent")
                        )
                )
        )
    )
    @(F.HiddenField().ID("userId").Text(ViewBag.userId))
    @(F.Window()
        .Hidden(true)
        .EnableResize(true)
        .EnableMaximize(true)
        .EnableClose(true)
        .Height(600)
        .Width(1020)
        .IsModal(true)
        .ClearIFrameAfterClose(false)
        .IFrameUrl(Url.Content("~/Home/Themes"))
        .EnableIFrame(true)
        .Title("界面风格")
        .ID("windowThemeRoller")
    )

    @(F.Window()
            .ID("Window1")
            .Width(800)
            .Height(480)
            .IsModal(true)
            .Hidden(true)
            .Target(Target.Top)
            .EnableResize(false)
            .EnableMaximize(false)
            .EnableIFrame(true)
            .IFrameUrl(Url.Content("about:blank"))
            .OnClose("")
    )
}

@section script {

    <script>

        // 点击主题仓库
        function onThemeSelectClick(event) {
            F.ui.windowThemeRoller.show();
        }
        function EditSelf(event) {
            F.ui.Window1.show('@Url.Content("~/Users/Edit/")' + F.ui.userId.value, '编辑用户');
        }

        // 页面控件初始化完毕后，会调用用户自定义的onReady函数
        F.ready(function () {

            // 初始化主框架中的树和选项卡互动，以及地址栏的更新
            // treeMenu： 主框架中的树控件实例，或者内嵌树控件的手风琴控件实例
            // mainTabStrip： 选项卡实例
            // updateHash: 切换Tab时，是否更新地址栏Hash值（默认值：true）
            // refreshWhenExist： 添加选项卡时，如果选项卡已经存在，是否刷新内部IFrame（默认值：false）
            // refreshWhenTabChange: 切换选项卡时，是否刷新内部IFrame（默认值：false）
            // maxTabCount: 最大允许打开的选项卡数量
            // maxTabMessage: 超过最大允许打开选项卡数量时的提示信息
            F.initTreeTabStrip(F.ui.treeMenu, F.ui.mainTabStrip, {
                maxTabCount: 10,
                maxTabMessage: '请先关闭一些选项卡（最多允许打开 10 个）！'
            });

        });
    </script>
}
